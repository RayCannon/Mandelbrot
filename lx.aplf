 lx;⎕IO;iy;drawn;cmat;x;y;around;x0;x1;y0;y1;drawnaround;bm;bmout;dotnet;cmatb;range;pos;mat;start;end;rr;ir;xpix;pixs;top;left;center;right;bottom;tl;tr;br;bl;nrange;n;bmat;m;bit;tie;size;data;bmname;gbits2;gbits;newcp;res;zero;irfactor;numcalc;outline;mousemsg;LowHi;posXs;posYs;half;colsrows;pixsh;n1;ys;xs;symmetrical;CalcMid;pixsq;sbo;xx;yy;gridspace;ind;calcs;st;ix;ind1;calcs1;calcs2;list;last;ij;spacing;where;flag;py;a;b;grid;cmap;czero;bailout;zoom;secs;bo;ls;gt;maxit;loopagain;f;sec;highbailout;∆;col;Ys;Xs;cYs;point25
⍝ Mandelbrot for Dyalog
⍝ f←{⍺+⍵*2}
⍝ c(f⍣67)c
⍝ Mandelbrot is semetercial around the real axis
⍝ Due to "landscape orientation of PocketPC´s screen,
⍝ Image drawn rotated thru 90 degrees
 ⎕IO←0
 secs←{0 60 60⊥3↑3↓⍵}                      ⍝ second from time stamp
 cmap←BuildCMap                            ⍝ build a colour map
 bailout←67                                ⍝ initial bail-out: max number of iriterations
 numcalc←0                                 ⍝ Count number of pixels calculated
 pixsq←296 240                             ⍝ 1/4 of the number of pixels
 pixsh←pixsq+pixsq                         ⍝ 1/2 of the number of pixels
 pixs←pixsh+pixsh                          ⍝ number of pixels
 newcp←¯0.5 0                              ⍝ New (starting) Center Point of screen in complex plane
 irfactor←0.75                             ⍝ Ratio of number of pixels in each dimension
 range←4×1,irfactor                        ⍝ "Range" of the complex plane shown on screen
 zoom←1                                    ⍝ Current zoom factor
 ⍝ Build a list the real and imaginary values of each pixel in complex plane
 posYs posXs←pixs BuildPos¨newcp{⍺+¯1 1×⍵÷2}¨range
 outline←BuildOutline pixs                 ⍝ Used to store previsous image during zoom
 f←ShowGrid outline cmap'0'(⍕newcp)'1'(⍕bailout)  ⍝ display  grid
 start←StartTimer ⎕TS
 loopagain←1
 :While loopagain                          ⍝ Loop for each new center point
     loopagain←0
     col←(⍳pixs[0]),¨0                      ⍝ Left edge
     Ys←posYs[⊃¨col]
     Xs←posXs[⊃∘⌽¨col]
     outline[col]←bailout ManCalcColor Ys Xs
     :If 0∊posXs                           ⍝ check if "real" line within image
         ∆←bailout⌈50+⌈/,outline           ⍝ a higher bailout because centrline contains meny black pixels
         zero←⍸posXs=0
         point25←⍸posYs=0.25
         xx←(⍳pixs[0]),¨zero           ⍝ center line
         Ys←posYs[⊃¨xx]
         bo←(¯2>Ys)∨Ys>0.25
         Xs←bo/pixs[0]⍴0
         cYs←bo/Ys
         outline[bo/xx]←∆ ManCalcColor cYs Xs
         outline[point25;zero]←1
     :End

   ⍝ The Mandelbrot set is symetrical about the real axis
   ⍝ so only parts in one half need ever be calculated
     y←⍳⊃pixs                              ⍝ All the pixels Top to Bottom
     x←⍳⊃⌽pixs                             ⍝ All the pixels Left to Right
     ls←+/posXs[x]<0                       ⍝ number of pixels in -ve imaginary half
     gt←+/posXs[x]>0                       ⍝ number of pixels in +ve imaginary half
     :If gt>ls                             ⍝ if more than half of the image is +ve imaginary
         bo←posXs[x]≥0                     ⍝ boolean of +ve i
     :Else
         bo←posXs[x]≤0                     ⍝ boolean of -ve i
     :End
     'bmout'⎕WC'Bitmap'('Bits'(Normalise outline))('CMap'(cmap))  ⍝ Make into a bitmap

     x←bo/x                                ⍝ Select one side with greater numbr of pixels in it
     cmat←outline[y;x]                     ⍝ get edge values from any "earlier results"
     drawn←(cmat>1)∨cmat<¯2                ⍝ Flag which pixels have already been calculated
     maxit←bailout⌈50+⌈/,cmat                       ⍝ decide on the number of iterations to use
     outline←outline bt cmat drawn(posXs[x])(posYs[y])maxit  ⍝ Trace all the boundries in the area
     cmat←¯2 Flood outline                 ⍝ fill all areas between boundaries
     ⍝ Now replicate the other side
     :If gt>ls
         outline←(1 ¯1×pixs)↑(⌽outline),outline
         cmat←(1 ¯1×pixs)↑(⌽cmat),cmat
     :Else
         outline←pixs↑outline,⌽outline
         cmat←pixs↑cmat,⌽cmat
     :End
     res←⎕EX'bmout'
     end←secs ⎕TS                          ⍝ end time
     sec←⍕end-start
     'bmout'⎕WC'Bitmap'('Bits'(Normalise cmat))('CMap'(cmap))  ⍝ Make into a bitmap
     f ⎕WS('Caption'('text'))
     Cycle&cmap
    ⍝ 'f.Caption'⎕WS sec,' secs  Center=',newcp,'  Zoom=',zoom,' Maxint=',maxit
     f ⎕WS('Caption'(sec,' secs  Center=',(⍕newcp),'  Zoom=',(⍕zoom),' Maxint=',⍕maxit))

     mousemsg←⎕DQ'f'
     numcalc←0                             ⍝ Reset counter
     :If ''≢mousemsg                       ⍝ Hit the big "X" get a '' in mousemsg
     :AndIf 'MouseDown'≡1⊃mousemsg
         loopagain←1
         zoom×←2
         range÷←2                          ⍝ Half range
         outline newcp posXs posYs←mousemsg NextMat outline posXs posYs pixs pixsh pixsq  ⍝ Copy Zoomed outline
         res←⎕EX'bmout'
       ⍝  'bmout'⎕WC'Bitmap'('Bits'(Normalise cmat))('CMap'(cmap))  ⍝ Make into a bitmap
       ⍝  cmap ShowGrid outline
     :End
     start←StartTimer ⎕TS                  ⍝ Start Timer

 :EndWhile                                 ⍝ Loop until no more changes requested
 res←⎕EX'bmout'
